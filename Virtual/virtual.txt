A virtual function is a special type of function that, when called,
resolves to the most-derived version of the function that exists between the base and derived class.
 
============ Do not call virtual function from Base class constructor or destructor ============
If we create derived object and try to call virtual function from the constructor,
then the function in Base class will be called since the derived part is not yet created.
Same for destructor of Base class.

============ Virtual Destructor ============
If we create Base* ptr = new derived; and try to delete ptr;
then only the Base destructor is called. To call even the derived destructor we need to make virtual ~Base();

Do not make all Base destructors virtual, because it adds a vptr which increases size of class

============ Override keyword ============
To ensure same signature is used while overriding the virtual funtion in base class
( Without override it is possible that the signature is not same and this will not be caught in CTE )


============ Pure virtual functions ============
Make function = 0. No defination needed. However a defination can be provided. Which can be used as a default defination to be used by the overiden derived class function.
int foo() = 0;
Any class inheriting this class should provide the defination else the derived class will remain abstract.
Derived d; Base* ptr = new Derived; // Allowed
Base b; Base b = d;	// Not allowed

If we delete ptr; where Base* ptr = new Derived; Then ptr cannot be used.

============ Abstract class ============
Has atleast one member function as pure virtual
Abstract class cannot be instantiated.
But pointer can be generated : Base* ptr = &D;


============ Interface class ============
Has all its member functions as pure virtual functions and has no member variables.
