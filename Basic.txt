============ Literals =============
Literal is a fixed value that has been inserted directly into the source code.
eg - int a = 23; std::string s = "Hello"; Here Hello and 23 are literals


============ Header Guards ==========
Used to prevent including same header file twice which can cause CTE
#ifndef ___UNIQUE_NAME___
#define ___UNIQUE_NAME___
...
#endif // ___UNIQUE_NAME___

Another way is by using
#pragma ones 


============ Increment/Decrement ============
Pre increment is faster than post. Can be seen from the assembly code.
Decrementing loop might be faster since comparing to 0 is faster than comparing to non-zero number.


============ Switch ============
In case break statement is not used, the code will execture the next case body.
case 0:
case 1:
  <statement_1>;
case 2:
  <statement_2>;
In case of 0 or 1, both statement_1 and statement_2 are executed.

Should not initialize variables inside the switch because the initialization step might get skipped. Causes CTE.

============ Reference ============
Cannot return reference to local variable from a function.


============ Program termination =============
std::abort() - Abnormal termination without cleanup
std::exit( EXIT_FAILURE ) - Normal termination with cleanup
std::quick_exit( EXIT_SUCCESS ) - Normal termination without complete cleanup
std::_Exit( EXIT_SUCCESS ) - Normal termination without cleanup
std::atexit( <function_name> ) - Register function to be called when exit is called. In case of multiple function, order of calling is reverse of adding them.
std::at_quick_exit( <function_name> ) - Register function to be called when std::quick_exit() is called.



============ Bitset ============
#include <bitset>
std::bitset<11> bits{ 0b10101010101 };    // Assigns binary value.
std::bitset<11> bits{ 10101010101 };      // Converts the decimal value to binary
bits.set( index );        // Set a particular bit
bits.reset( index );      // reset a particular bit
bits.flip( index );       // Flip a particular bit
std::cout << bits << std::endl;                    // Display all bits in binary
std::cout << bits.test( index ) << std::endl;     // Display only the secified index


============ Size ============
Size of a class = Sum of size of individual member variables.
Empty struct or class has size 1.
However in C empty struct has size 0.

Depends on computer to computer. On my computer -
bool:		1 bytes
char:		1 bytes
wchar_t:	4 bytes
char16_t:	2 bytes
char32_t:	4 bytes
short:		2 bytes
int:		4 bytes
long:		8 bytes
long long:	8 bytes
float:		4 bytes
double:		8 bytes
long double:	16 bytes

ASCII - 0 to 127


============ Storage classes ============
auto 
static
extern - The defination is available somewhere outside.
register - Use CPU register to storge the variable for faster access.
mutable - Use to modify a data member of a const object. mutable int x. Now x can be modified in a const member function of the class.
