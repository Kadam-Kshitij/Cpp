============== Types of inheritance ==============
1) Single A <- B 
2) Multilevel A <- B <- C <- D
3) Multiple B1 <- D, B2 <- D
4) Heirarchical B <- D1, B <- D2, B <- D3
5) Hybrid ( Combination of more than one from above )

============== Types of inheritance ( Access specifiers ) ==============
If no inheritance is specified then private inheritance is used.
Private inheritance can be used when we are using the base class internally in the derived class and dont want to make base class interface available
via the derived class object.

============== Access ==============
Inheritance scope --->
		 			public		protected 	private ( in Base class )
( Type of inhe. )	( In derived class )
public : 			public 		protected 	X
protected : 		protected 	protected 	X
private : 			private 	private 	X


============== Order of constructor call ==============
Order of constructor call --->
If A <- B <- C, then if object of C is created then order of constructor call A, B, C
Order of destructor class is exactly opposite to that of constructor call in any case.
In case of multiple inheritance
	class D : public B1, public B2 - First B1 is called then B2 constructor
	class D : public B2, public B1 - First B2 is called then B1 constructor
    
============== Initializer list ==============
The initializer list can only initialize the class member variables. It cannot initialize base class member variables.
Uses
1) const member variables.
2) reference member variables.
3) Speed
4) Calling base class member functions.
eg - Derived( int a, int x ) : val{ a }, Base{ x }

============== Pure virtual functions ==============
Make function = 0. No defination needed. However a defination can be provided.
Which can be used as a default defination to be used by the overiden derived class function.
int foo() = 0;
Any class inheriting this class should provide the defination else the derived class will remain abstract.
Derived d; Base* ptr = new Derived; // Allowed
Base b; Base b = d;	// Not allowed


============== Abstract Class ==============
Has atleast one member function as pure virtual
Abstract class cannot be instantiated.
But pointer can be generated : Base* ptr = &D;
Also reference can be created : Derived d; Base& ref = d;

============== Interface class ==============
Has all its member functions as pure virtual functions.

============== Multiple Inheritance ==============
1) In case base classes have the same named variable. Then in derived class we need to use <class_name>:: to resolve ambiguity. 
2) Diamond problem


============== Function overriding ==============
When the base class and derived class have member functions with exactly the same name, same return-type, and same arguments list,
then it is said to be function overriding.
To Call base function we need to use Base:: 

============== Hiding functionality ==============
Access specifier of Base class member variable can be changed as follows
private: using Base::x;
We can also delete a function in the derived class. void get() = delete;
