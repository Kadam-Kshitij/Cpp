===== Template function =====
template< typename T >
T foo( T x )
Call --> foo< int >( 23 )


===== Template class =====
template< typename T1, typename T2 >
class Base

template< typename T1, typename T2 >
T1 Base< T1, T2 >::goo( T2 x )

Call --> Base< int, float > obj; obj.goo( 21.4 )


===== Template function with type and size =====
template< typename T, int N >
void hoo( T x )

Call --> hoo< std::string, 4 >( "Kshitij" );


===== Override for a particular type =====
template<>
std::string foo< std::string >( std::string x )


===== Override a function template =====
template< typename T >
void ioo( T x )

template< typename T1, typename T2 >
void ioo( T1 x, T2 y )

===== Class with non-type argument =====
template< typename T, int size >
class joo

template< typename T, int size >
void joo< T, size >::koo( T x )

Call --> joo< float, 5 > obj1;
Call --> obj1.koo( 23.6 );

===== Default type for templates =====
template < typename T1 = int, typename T2 = std::string >
void loo( T1 x, T2 y )

Call -->
loo< int, std::string >( 23, "abc" );
loo< int >( 23, "abc" );
loo<>( 23, "abc" );





