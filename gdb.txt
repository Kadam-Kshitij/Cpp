--- Compiling ---
Compile program using -g option

--- Arguments to program ---
run <arg1> <arg2>             // If args are not provided then args to last run or those set using set args are used
set args <arg1> <arg2> ....   // Set args to be used by run
show args

--- Environment ---
set environment <var> = <value>
unset environment <var>
show environment <var>
show paths
path <directory>  // Add path to be searched

--- Directory ---
cd <path>
pwd

--- Commands ---
shell <command>
make <args>

--- Invoke ---
gdb <binary>
file <binary>     // To change debugged program while running gdb

--- Print code ---
list
list <function>
list <linenum>

--- Search ---
fo <regexp>
rev <regrxp>

--- Attach/Detach ---
attach <pid>      // Attach to a running process
detach

--- Display --- // Display variables everytime the debugger stops
display <var>
display/fmt <var>
delete display
delete display <disp_num>

--- Frames ---
backtrace,bt
frame, frame <num>            // Displays the frame/jump to the frame denoted by num
info frame, info frame <num>  // Displays info about the frame
info locals                   // Print local variables in current frame
info args                     // Print args to the current frame
up <n>                        // Move up or down by n frames
down <n>

--- Memory ---
x/nfu <address>
n - How many locations to display
f - Format to display in. Same as the ones used in printf
u - One unit is equal to how many bytes, b, h, w, g ( 1, 2, 4, 8 bytes )


--- Multi process debug ---
Make the child sleep - Using ps get the child pid. In a seperate gdb instance attach the child process
Now parent can be debugged in one gdb instance and child in the other
Other way is the "set follow-fork-mode <mode>" where mode can be child or parent. This way we can decide which process to debug after fork.

