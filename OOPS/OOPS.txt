=========== Access specifiers ===========
Public - Available everywhere
Protected - Available in the current class and derived class
Private - Available only in current class.

=========== Friend function ===========
Friend class / function - Has access to all members functions/variables of a class
eg - friend class Foo;
eg - friend void goo( const Base& b );
Only a particular member function of the class can be made friend as follows
friend void Friend::foo( const Base& b );


=========== Constructor ===========
class Derived : public Base1, public Base2 
Here order of constructor and destructor call is ---> B1, B2, D, ~D, ~B2, ~B1
if class Derived : public Base2, public Base1 then ---> B2, B1, D, ~D, ~B1, ~B2

One constructor can call another constructor in the same class. 
If any type of constructor is provided, then the compiler does not provide a default constructor.
Types of constructors :
	Default constructor : Takes no parameters
	Parametarized constructor : Takes parameters
	Copy constructor : Object should be send by reference otherwise recursive calling will take place.
Demo obj = obj1; In this case copy constructor will be called.
obj2 = obj1; In this case overloaded = operator will be called.

=========== Anonymous objects ====================== 
Normal object - Base b{ 23, 45 }
Anonymous object - Base{ 23, 45 }
Created, evaluated and destroyed on the same line.


=========== Constructor delegation ===========
One constructor can call another constructor of same class. This is called as constructor delegation
Base()
Base( int val ) : Base{}
Constructor can either delegate or do member initialization but not both.
eg - Base( int val ) : Base{}, x{ val }	// This will cause CTE.

One constructor can call another, and the other can call back the first. This will cause infinite looping and segmentation fault. This should be avoided.

Calling one constructor from body of other should be avoided. It will compile and run. But the behavior is not as expected.
The call from the body will create a new temporary instance which will get deleted on the same line.

Proper way to reset a class is by performing *this = Base{}; rather than calling the default constructor directly.

A constructor can either delegate or initialize a member function. Suppose we want to do both. In this case we can call a member function which should hold the common setup code rather than the deault constructor.

=========== Const objects ===========
const member functions do not modify the class member variables of call non-const member functions.
eg - void foo() const
const objects of a class can only access const member functions of a class
eg - const Base b; b.foo();

Another way in which a const object is used, is when we pass  a const reference to a function
eg - void foo( const Base& b ) // In this case b cannot access non-const functions of the class.

const function can return only const reference to a member variable
const int& goo() const

The following functions can be overloaded
void foo() const
void foo()
In case of const object, the const version is called and in case of non-const object the non-const version is called


=========== Static member variables ===========
Incase of const or constexpr static variables, we can assign the value in the class itself.
Also with c++17 and above, we can assign non-static member variables using inline keywork inside the class itself.
	static const int x = 23;
	static constexpr int y = 34;
	static inline int z = 19;	// Available with c++17 and above
